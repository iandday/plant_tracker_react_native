/* tslint:disable */
/* eslint-disable */
/**
 * Book Store API
 * Book Store API for renting books and notifying available/returned books in a store
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActivityOut
 */
export interface ActivityOut {
    /**
     * 
     * @type {string}
     * @memberof ActivityOut
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityOut
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ActivityOut
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface AreaIn
 */
export interface AreaIn {
    /**
     * 
     * @type {string}
     * @memberof AreaIn
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AreaIn
     */
    'location_id': string;
}
/**
 * 
 * @export
 * @interface AreaOut
 */
export interface AreaOut {
    /**
     * 
     * @type {string}
     * @memberof AreaOut
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AreaOut
     */
    'id': string;
    /**
     * 
     * @type {LocationOut}
     * @memberof AreaOut
     */
    'location': LocationOut;
    /**
     * 
     * @type {UserSchema}
     * @memberof AreaOut
     */
    'user': UserSchema;
}
/**
 * 
 * @export
 * @interface AreaPatch
 */
export interface AreaPatch {
    /**
     * 
     * @type {string}
     * @memberof AreaPatch
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AreaPatch
     */
    'location_id': string;
}
/**
 * 
 * @export
 * @interface BulkPlantCreateResponse
 */
export interface BulkPlantCreateResponse {
    /**
     * 
     * @type {Array<PlantOut>}
     * @memberof BulkPlantCreateResponse
     */
    'created'?: Array<PlantOut>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BulkPlantCreateResponse
     */
    'errors'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface DeleteStatus
 */
export interface DeleteStatus {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteStatus
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface EntryIn
 */
export interface EntryIn {
    /**
     * 
     * @type {Array<string>}
     * @memberof EntryIn
     */
    'activities': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EntryIn
     */
    'Timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof EntryIn
     */
    'plant_id': string;
    /**
     * 
     * @type {string}
     * @memberof EntryIn
     */
    'notes'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EntryIn
     */
    'plant_health'?: number | null;
}
/**
 * 
 * @export
 * @interface EntryOut
 */
export interface EntryOut {
    /**
     * 
     * @type {string}
     * @memberof EntryOut
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntryOut
     */
    'Timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof EntryOut
     */
    'plant': string;
    /**
     * 
     * @type {string}
     * @memberof EntryOut
     */
    'notes'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EntryOut
     */
    'plant_health': number;
    /**
     * 
     * @type {string}
     * @memberof EntryOut
     */
    'photo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntryOut
     */
    'user': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EntryOut
     */
    'activities': Array<string>;
}
/**
 * 
 * @export
 * @interface LocationIn
 */
export interface LocationIn {
    /**
     * 
     * @type {string}
     * @memberof LocationIn
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface LocationOut
 */
export interface LocationOut {
    /**
     * 
     * @type {string}
     * @memberof LocationOut
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof LocationOut
     */
    'id': string;
    /**
     * 
     * @type {UserSchema}
     * @memberof LocationOut
     */
    'user': UserSchema;
}
/**
 * 
 * @export
 * @interface LocationPatch
 */
export interface LocationPatch {
    /**
     * 
     * @type {string}
     * @memberof LocationPatch
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PlantIn
 */
export interface PlantIn {
    /**
     * 
     * @type {string}
     * @memberof PlantIn
     */
    'area_id': string;
    /**
     * 
     * @type {string}
     * @memberof PlantIn
     */
    'purchase_date'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlantIn
     */
    'graveyard'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PlantIn
     */
    'death_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantIn
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PlantIn
     */
    'common_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantIn
     */
    'scientific_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantIn
     */
    'notes'?: string | null;
}
/**
 * 
 * @export
 * @interface PlantOut
 */
export interface PlantOut {
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'common_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'scientific_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'purchase_date'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PlantOut
     */
    'graveyard'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'death_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'main_photo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'notes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'area': string;
    /**
     * 
     * @type {string}
     * @memberof PlantOut
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface PlantPost
 */
export interface PlantPost {
    /**
     * 
     * @type {string}
     * @memberof PlantPost
     */
    'area_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantPost
     */
    'purchase_date'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlantPost
     */
    'graveyard'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PlantPost
     */
    'death_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantPost
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantPost
     */
    'common_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantPost
     */
    'scientific_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantPost
     */
    'notes'?: string | null;
}
/**
 * 
 * @export
 * @interface RegEnabledSchema
 */
export interface RegEnabledSchema {
    /**
     * 
     * @type {boolean}
     * @memberof RegEnabledSchema
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface RegisterIn
 */
export interface RegisterIn {
    /**
     * 
     * @type {string}
     * @memberof RegisterIn
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterIn
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterIn
     */
    'password_verify': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterIn
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterIn
     */
    'last_name': string;
}
/**
 * 
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface TokenObtainPairOut
 */
export interface TokenObtainPairOut {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairOut
     */
    'access': string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairOut
     */
    'refresh': string;
    /**
     * 
     * @type {UserSchema}
     * @memberof TokenObtainPairOut
     */
    'user': UserSchema;
}
/**
 * 
 * @export
 * @interface TokenRefreshPair
 */
export interface TokenRefreshPair {
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshPair
     */
    'refresh': string;
}
/**
 * 
 * @export
 * @interface UserSchema
 */
export interface UserSchema {
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'last_name': string;
}

/**
 * ActivityApi - axios parameter creator
 * @export
 */
export const ActivityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activity
         * @summary List Activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewActivityListActivities: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/activity/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityApi - functional programming interface
 * @export
 */
export const ActivityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivityApiAxiosParamCreator(configuration)
    return {
        /**
         * Activity
         * @summary List Activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewActivityListActivities(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActivityOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewActivityListActivities(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivityApi.trackerApiViewActivityListActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActivityApi - factory interface
 * @export
 */
export const ActivityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivityApiFp(configuration)
    return {
        /**
         * Activity
         * @summary List Activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewActivityListActivities(options?: any): AxiosPromise<Array<ActivityOut>> {
            return localVarFp.trackerApiViewActivityListActivities(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export class ActivityApi extends BaseAPI {
    /**
     * Activity
     * @summary List Activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public trackerApiViewActivityListActivities(options?: RawAxiosRequestConfig) {
        return ActivityApiFp(this.configuration).trackerApiViewActivityListActivities(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AreaApi - axios parameter creator
 * @export
 */
export const AreaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Area
         * @summary Patch Area
         * @param {string} areaId 
         * @param {AreaPatch} areaPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areaPatchArea: async (areaId: string, areaPatch: AreaPatch, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            assertParamExists('areaPatchArea', 'areaId', areaId)
            // verify required parameter 'areaPatch' is not null or undefined
            assertParamExists('areaPatchArea', 'areaPatch', areaPatch)
            const localVarPath = `/api/area/{area_id}`
                .replace(`{${"area_id"}}`, encodeURIComponent(String(areaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(areaPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Area
         * @summary Create Area
         * @param {AreaIn} areaIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewAreaCreateArea: async (areaIn: AreaIn, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaIn' is not null or undefined
            assertParamExists('trackerApiViewAreaCreateArea', 'areaIn', areaIn)
            const localVarPath = `/api/area/area`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(areaIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Area
         * @summary Delete Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewAreaDeleteArea: async (areaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            assertParamExists('trackerApiViewAreaDeleteArea', 'areaId', areaId)
            const localVarPath = `/api/area/{area_id}`
                .replace(`{${"area_id"}}`, encodeURIComponent(String(areaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Area
         * @summary Get Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewAreaGetArea: async (areaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            assertParamExists('trackerApiViewAreaGetArea', 'areaId', areaId)
            const localVarPath = `/api/area/{area_id}`
                .replace(`{${"area_id"}}`, encodeURIComponent(String(areaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Arean
         * @summary List Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewAreaListAreas: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/area/area`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AreaApi - functional programming interface
 * @export
 */
export const AreaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AreaApiAxiosParamCreator(configuration)
    return {
        /**
         * Area
         * @summary Patch Area
         * @param {string} areaId 
         * @param {AreaPatch} areaPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async areaPatchArea(areaId: string, areaPatch: AreaPatch, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AreaOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.areaPatchArea(areaId, areaPatch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AreaApi.areaPatchArea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Area
         * @summary Create Area
         * @param {AreaIn} areaIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewAreaCreateArea(areaIn: AreaIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AreaOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewAreaCreateArea(areaIn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AreaApi.trackerApiViewAreaCreateArea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Area
         * @summary Delete Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewAreaDeleteArea(areaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewAreaDeleteArea(areaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AreaApi.trackerApiViewAreaDeleteArea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Area
         * @summary Get Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewAreaGetArea(areaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AreaOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewAreaGetArea(areaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AreaApi.trackerApiViewAreaGetArea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Arean
         * @summary List Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewAreaListAreas(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AreaOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewAreaListAreas(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AreaApi.trackerApiViewAreaListAreas']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AreaApi - factory interface
 * @export
 */
export const AreaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AreaApiFp(configuration)
    return {
        /**
         * Area
         * @summary Patch Area
         * @param {string} areaId 
         * @param {AreaPatch} areaPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areaPatchArea(areaId: string, areaPatch: AreaPatch, options?: any): AxiosPromise<AreaOut> {
            return localVarFp.areaPatchArea(areaId, areaPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Area
         * @summary Create Area
         * @param {AreaIn} areaIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewAreaCreateArea(areaIn: AreaIn, options?: any): AxiosPromise<AreaOut> {
            return localVarFp.trackerApiViewAreaCreateArea(areaIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Area
         * @summary Delete Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewAreaDeleteArea(areaId: string, options?: any): AxiosPromise<DeleteStatus> {
            return localVarFp.trackerApiViewAreaDeleteArea(areaId, options).then((request) => request(axios, basePath));
        },
        /**
         * Area
         * @summary Get Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewAreaGetArea(areaId: string, options?: any): AxiosPromise<AreaOut> {
            return localVarFp.trackerApiViewAreaGetArea(areaId, options).then((request) => request(axios, basePath));
        },
        /**
         * Arean
         * @summary List Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewAreaListAreas(options?: any): AxiosPromise<Array<AreaOut>> {
            return localVarFp.trackerApiViewAreaListAreas(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AreaApi - object-oriented interface
 * @export
 * @class AreaApi
 * @extends {BaseAPI}
 */
export class AreaApi extends BaseAPI {
    /**
     * Area
     * @summary Patch Area
     * @param {string} areaId 
     * @param {AreaPatch} areaPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public areaPatchArea(areaId: string, areaPatch: AreaPatch, options?: RawAxiosRequestConfig) {
        return AreaApiFp(this.configuration).areaPatchArea(areaId, areaPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Area
     * @summary Create Area
     * @param {AreaIn} areaIn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public trackerApiViewAreaCreateArea(areaIn: AreaIn, options?: RawAxiosRequestConfig) {
        return AreaApiFp(this.configuration).trackerApiViewAreaCreateArea(areaIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Area
     * @summary Delete Area
     * @param {string} areaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public trackerApiViewAreaDeleteArea(areaId: string, options?: RawAxiosRequestConfig) {
        return AreaApiFp(this.configuration).trackerApiViewAreaDeleteArea(areaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Area
     * @summary Get Area
     * @param {string} areaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public trackerApiViewAreaGetArea(areaId: string, options?: RawAxiosRequestConfig) {
        return AreaApiFp(this.configuration).trackerApiViewAreaGetArea(areaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Arean
     * @summary List Areas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public trackerApiViewAreaListAreas(options?: RawAxiosRequestConfig) {
        return AreaApiFp(this.configuration).trackerApiViewAreaListAreas(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BulkApi - axios parameter creator
 * @export
 */
export const BulkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Bulk
         * @summary Bulk Create Plant
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewBulkBulkCreatePlant: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('trackerApiViewBulkBulkCreatePlant', 'file', file)
            const localVarPath = `/api/bulk/plant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkApi - functional programming interface
 * @export
 */
export const BulkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkApiAxiosParamCreator(configuration)
    return {
        /**
         * Bulk
         * @summary Bulk Create Plant
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewBulkBulkCreatePlant(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkPlantCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewBulkBulkCreatePlant(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BulkApi.trackerApiViewBulkBulkCreatePlant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BulkApi - factory interface
 * @export
 */
export const BulkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkApiFp(configuration)
    return {
        /**
         * Bulk
         * @summary Bulk Create Plant
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewBulkBulkCreatePlant(file: File, options?: any): AxiosPromise<BulkPlantCreateResponse> {
            return localVarFp.trackerApiViewBulkBulkCreatePlant(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BulkApi - object-oriented interface
 * @export
 * @class BulkApi
 * @extends {BaseAPI}
 */
export class BulkApi extends BaseAPI {
    /**
     * Bulk
     * @summary Bulk Create Plant
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkApi
     */
    public trackerApiViewBulkBulkCreatePlant(file: File, options?: RawAxiosRequestConfig) {
        return BulkApiFp(this.configuration).trackerApiViewBulkBulkCreatePlant(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EntryApi - axios parameter creator
 * @export
 */
export const EntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Entry
         * @summary Create Entry
         * @param {Array<string>} activities 
         * @param {string} timestamp 
         * @param {string} plantId 
         * @param {string | null} [notes] 
         * @param {number | null} [plantHealth] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryCreateEntry: async (activities: Array<string>, timestamp: string, plantId: string, notes?: string | null, plantHealth?: number | null, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activities' is not null or undefined
            assertParamExists('trackerApiViewEntryCreateEntry', 'activities', activities)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('trackerApiViewEntryCreateEntry', 'timestamp', timestamp)
            // verify required parameter 'plantId' is not null or undefined
            assertParamExists('trackerApiViewEntryCreateEntry', 'plantId', plantId)
            const localVarPath = `/api/entry/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (activities) {
                localVarFormParams.append('activities', activities.join(COLLECTION_FORMATS.csv));
            }

    
            if (timestamp !== undefined) { 
                localVarFormParams.append('Timestamp', timestamp as any);
            }
    
            if (plantId !== undefined) { 
                localVarFormParams.append('plant_id', plantId as any);
            }
    
            if (notes !== undefined) { 
                localVarFormParams.append('notes', notes as any);
            }
    
            if (plantHealth !== undefined) { 
                localVarFormParams.append('plant_health', plantHealth as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Entry
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryDeleteEntry: async (entryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('trackerApiViewEntryDeleteEntry', 'entryId', entryId)
            const localVarPath = `/api/entry/{entry_id}`
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Entry
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryGetEntry: async (entryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('trackerApiViewEntryGetEntry', 'entryId', entryId)
            const localVarPath = `/api/entry/{entry_id}`
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Entry
         * @summary Get Plant Entries
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryGetPlantEntries: async (plantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantId' is not null or undefined
            assertParamExists('trackerApiViewEntryGetPlantEntries', 'plantId', plantId)
            const localVarPath = `/api/entry/plant/{plant_id}`
                .replace(`{${"plant_id"}}`, encodeURIComponent(String(plantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Entry
         * @summary List Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryListEntries: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entry/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntryApi - functional programming interface
 * @export
 */
export const EntryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntryApiAxiosParamCreator(configuration)
    return {
        /**
         * Entry
         * @summary Create Entry
         * @param {Array<string>} activities 
         * @param {string} timestamp 
         * @param {string} plantId 
         * @param {string | null} [notes] 
         * @param {number | null} [plantHealth] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryCreateEntry(activities: Array<string>, timestamp: string, plantId: string, notes?: string | null, plantHealth?: number | null, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryCreateEntry(activities, timestamp, plantId, notes, plantHealth, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntryApi.trackerApiViewEntryCreateEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Entry
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryDeleteEntry(entryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryDeleteEntry(entryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntryApi.trackerApiViewEntryDeleteEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Entry
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryGetEntry(entryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryGetEntry(entryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntryApi.trackerApiViewEntryGetEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Entry
         * @summary Get Plant Entries
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryGetPlantEntries(plantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryGetPlantEntries(plantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntryApi.trackerApiViewEntryGetPlantEntries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Entry
         * @summary List Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryListEntries(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryListEntries(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntryApi.trackerApiViewEntryListEntries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EntryApi - factory interface
 * @export
 */
export const EntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntryApiFp(configuration)
    return {
        /**
         * Entry
         * @summary Create Entry
         * @param {Array<string>} activities 
         * @param {string} timestamp 
         * @param {string} plantId 
         * @param {string | null} [notes] 
         * @param {number | null} [plantHealth] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryCreateEntry(activities: Array<string>, timestamp: string, plantId: string, notes?: string | null, plantHealth?: number | null, file?: File, options?: any): AxiosPromise<EntryOut> {
            return localVarFp.trackerApiViewEntryCreateEntry(activities, timestamp, plantId, notes, plantHealth, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Entry
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryDeleteEntry(entryId: string, options?: any): AxiosPromise<DeleteStatus> {
            return localVarFp.trackerApiViewEntryDeleteEntry(entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Entry
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryGetEntry(entryId: string, options?: any): AxiosPromise<EntryOut> {
            return localVarFp.trackerApiViewEntryGetEntry(entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Entry
         * @summary Get Plant Entries
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryGetPlantEntries(plantId: string, options?: any): AxiosPromise<Array<EntryOut>> {
            return localVarFp.trackerApiViewEntryGetPlantEntries(plantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Entry
         * @summary List Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryListEntries(options?: any): AxiosPromise<Array<EntryOut>> {
            return localVarFp.trackerApiViewEntryListEntries(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EntryApi - object-oriented interface
 * @export
 * @class EntryApi
 * @extends {BaseAPI}
 */
export class EntryApi extends BaseAPI {
    /**
     * Entry
     * @summary Create Entry
     * @param {Array<string>} activities 
     * @param {string} timestamp 
     * @param {string} plantId 
     * @param {string | null} [notes] 
     * @param {number | null} [plantHealth] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryCreateEntry(activities: Array<string>, timestamp: string, plantId: string, notes?: string | null, plantHealth?: number | null, file?: File, options?: RawAxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryCreateEntry(activities, timestamp, plantId, notes, plantHealth, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Entry
     * @summary Delete Entry
     * @param {string} entryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryDeleteEntry(entryId: string, options?: RawAxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryDeleteEntry(entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Entry
     * @summary Get Entry
     * @param {string} entryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryGetEntry(entryId: string, options?: RawAxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryGetEntry(entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Entry
     * @summary Get Plant Entries
     * @param {string} plantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryGetPlantEntries(plantId: string, options?: RawAxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryGetPlantEntries(plantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Entry
     * @summary List Entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryListEntries(options?: RawAxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryListEntries(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Location
         * @summary Patch Location
         * @param {string} locationId 
         * @param {LocationPatch} locationPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationPatchLocation: async (locationId: string, locationPatch: LocationPatch, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('locationPatchLocation', 'locationId', locationId)
            // verify required parameter 'locationPatch' is not null or undefined
            assertParamExists('locationPatchLocation', 'locationPatch', locationPatch)
            const localVarPath = `/api/location/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location
         * @summary Create Location
         * @param {LocationIn} locationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationCreateLocation: async (locationIn: LocationIn, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationIn' is not null or undefined
            assertParamExists('trackerApiViewLocationCreateLocation', 'locationIn', locationIn)
            const localVarPath = `/api/location/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location
         * @summary Delete Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationDeleteLocation: async (locationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('trackerApiViewLocationDeleteLocation', 'locationId', locationId)
            const localVarPath = `/api/location/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location
         * @summary Get Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationGetLocation: async (locationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('trackerApiViewLocationGetLocation', 'locationId', locationId)
            const localVarPath = `/api/location/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location
         * @summary List Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationListLocations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/location/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationApiAxiosParamCreator(configuration)
    return {
        /**
         * Location
         * @summary Patch Location
         * @param {string} locationId 
         * @param {LocationPatch} locationPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationPatchLocation(locationId: string, locationPatch: LocationPatch, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationPatchLocation(locationId, locationPatch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.locationPatchLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Location
         * @summary Create Location
         * @param {LocationIn} locationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewLocationCreateLocation(locationIn: LocationIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewLocationCreateLocation(locationIn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.trackerApiViewLocationCreateLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Location
         * @summary Delete Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewLocationDeleteLocation(locationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewLocationDeleteLocation(locationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.trackerApiViewLocationDeleteLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Location
         * @summary Get Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewLocationGetLocation(locationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewLocationGetLocation(locationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.trackerApiViewLocationGetLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Location
         * @summary List Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewLocationListLocations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewLocationListLocations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.trackerApiViewLocationListLocations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationApiFp(configuration)
    return {
        /**
         * Location
         * @summary Patch Location
         * @param {string} locationId 
         * @param {LocationPatch} locationPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationPatchLocation(locationId: string, locationPatch: LocationPatch, options?: any): AxiosPromise<LocationOut> {
            return localVarFp.locationPatchLocation(locationId, locationPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Location
         * @summary Create Location
         * @param {LocationIn} locationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationCreateLocation(locationIn: LocationIn, options?: any): AxiosPromise<LocationOut> {
            return localVarFp.trackerApiViewLocationCreateLocation(locationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Location
         * @summary Delete Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationDeleteLocation(locationId: string, options?: any): AxiosPromise<DeleteStatus> {
            return localVarFp.trackerApiViewLocationDeleteLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Location
         * @summary Get Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationGetLocation(locationId: string, options?: any): AxiosPromise<LocationOut> {
            return localVarFp.trackerApiViewLocationGetLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Location
         * @summary List Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationListLocations(options?: any): AxiosPromise<Array<LocationOut>> {
            return localVarFp.trackerApiViewLocationListLocations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * Location
     * @summary Patch Location
     * @param {string} locationId 
     * @param {LocationPatch} locationPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public locationPatchLocation(locationId: string, locationPatch: LocationPatch, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).locationPatchLocation(locationId, locationPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location
     * @summary Create Location
     * @param {LocationIn} locationIn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public trackerApiViewLocationCreateLocation(locationIn: LocationIn, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).trackerApiViewLocationCreateLocation(locationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location
     * @summary Delete Location
     * @param {string} locationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public trackerApiViewLocationDeleteLocation(locationId: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).trackerApiViewLocationDeleteLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location
     * @summary Get Location
     * @param {string} locationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public trackerApiViewLocationGetLocation(locationId: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).trackerApiViewLocationGetLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location
     * @summary List Locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public trackerApiViewLocationListLocations(options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).trackerApiViewLocationListLocations(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlantApi - axios parameter creator
 * @export
 */
export const PlantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Plant
         * @summary Create Plant
         * @param {string} areaId 
         * @param {string} name 
         * @param {string} [purchaseDate] 
         * @param {boolean} [graveyard] 
         * @param {string} [deathDate] 
         * @param {string | null} [commonName] 
         * @param {string | null} [scientificName] 
         * @param {string | null} [notes] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantCreatePlant: async (areaId: string, name: string, purchaseDate?: string, graveyard?: boolean, deathDate?: string, commonName?: string | null, scientificName?: string | null, notes?: string | null, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            assertParamExists('trackerApiViewPlantCreatePlant', 'areaId', areaId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('trackerApiViewPlantCreatePlant', 'name', name)
            const localVarPath = `/api/plant/plant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (areaId !== undefined) { 
                localVarFormParams.append('area_id', areaId as any);
            }
    
            if (purchaseDate !== undefined) { 
                localVarFormParams.append('purchase_date', purchaseDate as any);
            }
    
            if (graveyard !== undefined) { 
                localVarFormParams.append('graveyard', String(graveyard) as any);
            }
    
            if (deathDate !== undefined) { 
                localVarFormParams.append('death_date', deathDate as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (commonName !== undefined) { 
                localVarFormParams.append('common_name', commonName as any);
            }
    
            if (scientificName !== undefined) { 
                localVarFormParams.append('scientific_name', scientificName as any);
            }
    
            if (notes !== undefined) { 
                localVarFormParams.append('notes', notes as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plant
         * @summary Delete Plant
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantDeletePlant: async (plantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantId' is not null or undefined
            assertParamExists('trackerApiViewPlantDeletePlant', 'plantId', plantId)
            const localVarPath = `/api/plant/{plant_id}`
                .replace(`{${"plant_id"}}`, encodeURIComponent(String(plantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plant
         * @summary Get Plant
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantGetPlant: async (plantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantId' is not null or undefined
            assertParamExists('trackerApiViewPlantGetPlant', 'plantId', plantId)
            const localVarPath = `/api/plant/{plant_id}`
                .replace(`{${"plant_id"}}`, encodeURIComponent(String(plantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plant
         * @summary List Plants
         * @param {boolean} [excludeGraveyard] 
         * @param {boolean} [graveyardOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantListPlants: async (excludeGraveyard?: boolean, graveyardOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/plant/plant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (excludeGraveyard !== undefined) {
                localVarQueryParameter['exclude_graveyard'] = excludeGraveyard;
            }

            if (graveyardOnly !== undefined) {
                localVarQueryParameter['graveyard_only'] = graveyardOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plant
         * @summary Post Plant
         * @param {string} plantId 
         * @param {string} [areaId] 
         * @param {string} [purchaseDate] 
         * @param {boolean} [graveyard] 
         * @param {string} [deathDate] 
         * @param {string | null} [name] 
         * @param {string | null} [commonName] 
         * @param {string | null} [scientificName] 
         * @param {string | null} [notes] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantPostPlant: async (plantId: string, areaId?: string, purchaseDate?: string, graveyard?: boolean, deathDate?: string, name?: string | null, commonName?: string | null, scientificName?: string | null, notes?: string | null, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantId' is not null or undefined
            assertParamExists('trackerApiViewPlantPostPlant', 'plantId', plantId)
            const localVarPath = `/api/plant/{plant_id}`
                .replace(`{${"plant_id"}}`, encodeURIComponent(String(plantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (areaId !== undefined) { 
                localVarFormParams.append('area_id', areaId as any);
            }
    
            if (purchaseDate !== undefined) { 
                localVarFormParams.append('purchase_date', purchaseDate as any);
            }
    
            if (graveyard !== undefined) { 
                localVarFormParams.append('graveyard', String(graveyard) as any);
            }
    
            if (deathDate !== undefined) { 
                localVarFormParams.append('death_date', deathDate as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (commonName !== undefined) { 
                localVarFormParams.append('common_name', commonName as any);
            }
    
            if (scientificName !== undefined) { 
                localVarFormParams.append('scientific_name', scientificName as any);
            }
    
            if (notes !== undefined) { 
                localVarFormParams.append('notes', notes as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlantApi - functional programming interface
 * @export
 */
export const PlantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlantApiAxiosParamCreator(configuration)
    return {
        /**
         * Plant
         * @summary Create Plant
         * @param {string} areaId 
         * @param {string} name 
         * @param {string} [purchaseDate] 
         * @param {boolean} [graveyard] 
         * @param {string} [deathDate] 
         * @param {string | null} [commonName] 
         * @param {string | null} [scientificName] 
         * @param {string | null} [notes] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewPlantCreatePlant(areaId: string, name: string, purchaseDate?: string, graveyard?: boolean, deathDate?: string, commonName?: string | null, scientificName?: string | null, notes?: string | null, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewPlantCreatePlant(areaId, name, purchaseDate, graveyard, deathDate, commonName, scientificName, notes, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlantApi.trackerApiViewPlantCreatePlant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Plant
         * @summary Delete Plant
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewPlantDeletePlant(plantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewPlantDeletePlant(plantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlantApi.trackerApiViewPlantDeletePlant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Plant
         * @summary Get Plant
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewPlantGetPlant(plantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewPlantGetPlant(plantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlantApi.trackerApiViewPlantGetPlant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Plant
         * @summary List Plants
         * @param {boolean} [excludeGraveyard] 
         * @param {boolean} [graveyardOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewPlantListPlants(excludeGraveyard?: boolean, graveyardOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlantOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewPlantListPlants(excludeGraveyard, graveyardOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlantApi.trackerApiViewPlantListPlants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Plant
         * @summary Post Plant
         * @param {string} plantId 
         * @param {string} [areaId] 
         * @param {string} [purchaseDate] 
         * @param {boolean} [graveyard] 
         * @param {string} [deathDate] 
         * @param {string | null} [name] 
         * @param {string | null} [commonName] 
         * @param {string | null} [scientificName] 
         * @param {string | null} [notes] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewPlantPostPlant(plantId: string, areaId?: string, purchaseDate?: string, graveyard?: boolean, deathDate?: string, name?: string | null, commonName?: string | null, scientificName?: string | null, notes?: string | null, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewPlantPostPlant(plantId, areaId, purchaseDate, graveyard, deathDate, name, commonName, scientificName, notes, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlantApi.trackerApiViewPlantPostPlant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlantApi - factory interface
 * @export
 */
export const PlantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlantApiFp(configuration)
    return {
        /**
         * Plant
         * @summary Create Plant
         * @param {string} areaId 
         * @param {string} name 
         * @param {string} [purchaseDate] 
         * @param {boolean} [graveyard] 
         * @param {string} [deathDate] 
         * @param {string | null} [commonName] 
         * @param {string | null} [scientificName] 
         * @param {string | null} [notes] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantCreatePlant(areaId: string, name: string, purchaseDate?: string, graveyard?: boolean, deathDate?: string, commonName?: string | null, scientificName?: string | null, notes?: string | null, file?: File, options?: any): AxiosPromise<PlantOut> {
            return localVarFp.trackerApiViewPlantCreatePlant(areaId, name, purchaseDate, graveyard, deathDate, commonName, scientificName, notes, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Plant
         * @summary Delete Plant
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantDeletePlant(plantId: string, options?: any): AxiosPromise<DeleteStatus> {
            return localVarFp.trackerApiViewPlantDeletePlant(plantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Plant
         * @summary Get Plant
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantGetPlant(plantId: string, options?: any): AxiosPromise<PlantOut> {
            return localVarFp.trackerApiViewPlantGetPlant(plantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Plant
         * @summary List Plants
         * @param {boolean} [excludeGraveyard] 
         * @param {boolean} [graveyardOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantListPlants(excludeGraveyard?: boolean, graveyardOnly?: boolean, options?: any): AxiosPromise<Array<PlantOut>> {
            return localVarFp.trackerApiViewPlantListPlants(excludeGraveyard, graveyardOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Plant
         * @summary Post Plant
         * @param {string} plantId 
         * @param {string} [areaId] 
         * @param {string} [purchaseDate] 
         * @param {boolean} [graveyard] 
         * @param {string} [deathDate] 
         * @param {string | null} [name] 
         * @param {string | null} [commonName] 
         * @param {string | null} [scientificName] 
         * @param {string | null} [notes] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewPlantPostPlant(plantId: string, areaId?: string, purchaseDate?: string, graveyard?: boolean, deathDate?: string, name?: string | null, commonName?: string | null, scientificName?: string | null, notes?: string | null, file?: File, options?: any): AxiosPromise<PlantOut> {
            return localVarFp.trackerApiViewPlantPostPlant(plantId, areaId, purchaseDate, graveyard, deathDate, name, commonName, scientificName, notes, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlantApi - object-oriented interface
 * @export
 * @class PlantApi
 * @extends {BaseAPI}
 */
export class PlantApi extends BaseAPI {
    /**
     * Plant
     * @summary Create Plant
     * @param {string} areaId 
     * @param {string} name 
     * @param {string} [purchaseDate] 
     * @param {boolean} [graveyard] 
     * @param {string} [deathDate] 
     * @param {string | null} [commonName] 
     * @param {string | null} [scientificName] 
     * @param {string | null} [notes] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantApi
     */
    public trackerApiViewPlantCreatePlant(areaId: string, name: string, purchaseDate?: string, graveyard?: boolean, deathDate?: string, commonName?: string | null, scientificName?: string | null, notes?: string | null, file?: File, options?: RawAxiosRequestConfig) {
        return PlantApiFp(this.configuration).trackerApiViewPlantCreatePlant(areaId, name, purchaseDate, graveyard, deathDate, commonName, scientificName, notes, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plant
     * @summary Delete Plant
     * @param {string} plantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantApi
     */
    public trackerApiViewPlantDeletePlant(plantId: string, options?: RawAxiosRequestConfig) {
        return PlantApiFp(this.configuration).trackerApiViewPlantDeletePlant(plantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plant
     * @summary Get Plant
     * @param {string} plantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantApi
     */
    public trackerApiViewPlantGetPlant(plantId: string, options?: RawAxiosRequestConfig) {
        return PlantApiFp(this.configuration).trackerApiViewPlantGetPlant(plantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plant
     * @summary List Plants
     * @param {boolean} [excludeGraveyard] 
     * @param {boolean} [graveyardOnly] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantApi
     */
    public trackerApiViewPlantListPlants(excludeGraveyard?: boolean, graveyardOnly?: boolean, options?: RawAxiosRequestConfig) {
        return PlantApiFp(this.configuration).trackerApiViewPlantListPlants(excludeGraveyard, graveyardOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plant
     * @summary Post Plant
     * @param {string} plantId 
     * @param {string} [areaId] 
     * @param {string} [purchaseDate] 
     * @param {boolean} [graveyard] 
     * @param {string} [deathDate] 
     * @param {string | null} [name] 
     * @param {string | null} [commonName] 
     * @param {string | null} [scientificName] 
     * @param {string | null} [notes] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantApi
     */
    public trackerApiViewPlantPostPlant(plantId: string, areaId?: string, purchaseDate?: string, graveyard?: boolean, deathDate?: string, name?: string | null, commonName?: string | null, scientificName?: string | null, notes?: string | null, file?: File, options?: RawAxiosRequestConfig) {
        return PlantApiFp(this.configuration).trackerApiViewPlantPostPlant(plantId, areaId, purchaseDate, graveyard, deathDate, name, commonName, scientificName, notes, file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserMe: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary New Token
         * @param {TokenObtainPair} tokenObtainPair 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserNewToken: async (tokenObtainPair: TokenObtainPair, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenObtainPair' is not null or undefined
            assertParamExists('trackerApiViewUserNewToken', 'tokenObtainPair', tokenObtainPair)
            const localVarPath = `/api/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenObtainPair, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {TokenRefreshPair} tokenRefreshPair 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserRefreshToken: async (tokenRefreshPair: TokenRefreshPair, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefreshPair' is not null or undefined
            assertParamExists('trackerApiViewUserRefreshToken', 'tokenRefreshPair', tokenRefreshPair)
            const localVarPath = `/api/user/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefreshPair, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reg Enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserRegEnabled: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/reg_enabled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {RegisterIn} registerIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserRegister: async (registerIn: RegisterIn, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerIn' is not null or undefined
            assertParamExists('trackerApiViewUserRegister', 'registerIn', registerIn)
            const localVarPath = `/api/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Me
         * @param {UserSchema} userSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserUpdateMe: async (userSchema: UserSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSchema' is not null or undefined
            assertParamExists('trackerApiViewUserUpdateMe', 'userSchema', userSchema)
            const localVarPath = `/api/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewUserMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewUserMe(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.trackerApiViewUserMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary New Token
         * @param {TokenObtainPair} tokenObtainPair 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewUserNewToken(tokenObtainPair: TokenObtainPair, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPairOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewUserNewToken(tokenObtainPair, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.trackerApiViewUserNewToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {TokenRefreshPair} tokenRefreshPair 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewUserRefreshToken(tokenRefreshPair: TokenRefreshPair, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPairOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewUserRefreshToken(tokenRefreshPair, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.trackerApiViewUserRefreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reg Enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewUserRegEnabled(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegEnabledSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewUserRegEnabled(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.trackerApiViewUserRegEnabled']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register
         * @param {RegisterIn} registerIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewUserRegister(registerIn: RegisterIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewUserRegister(registerIn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.trackerApiViewUserRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Me
         * @param {UserSchema} userSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewUserUpdateMe(userSchema: UserSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewUserUpdateMe(userSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.trackerApiViewUserUpdateMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserMe(options?: any): AxiosPromise<UserSchema> {
            return localVarFp.trackerApiViewUserMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary New Token
         * @param {TokenObtainPair} tokenObtainPair 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserNewToken(tokenObtainPair: TokenObtainPair, options?: any): AxiosPromise<TokenObtainPairOut> {
            return localVarFp.trackerApiViewUserNewToken(tokenObtainPair, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {TokenRefreshPair} tokenRefreshPair 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserRefreshToken(tokenRefreshPair: TokenRefreshPair, options?: any): AxiosPromise<TokenObtainPairOut> {
            return localVarFp.trackerApiViewUserRefreshToken(tokenRefreshPair, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reg Enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserRegEnabled(options?: any): AxiosPromise<RegEnabledSchema> {
            return localVarFp.trackerApiViewUserRegEnabled(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {RegisterIn} registerIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserRegister(registerIn: RegisterIn, options?: any): AxiosPromise<UserSchema> {
            return localVarFp.trackerApiViewUserRegister(registerIn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Me
         * @param {UserSchema} userSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewUserUpdateMe(userSchema: UserSchema, options?: any): AxiosPromise<UserSchema> {
            return localVarFp.trackerApiViewUserUpdateMe(userSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public trackerApiViewUserMe(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).trackerApiViewUserMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary New Token
     * @param {TokenObtainPair} tokenObtainPair 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public trackerApiViewUserNewToken(tokenObtainPair: TokenObtainPair, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).trackerApiViewUserNewToken(tokenObtainPair, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {TokenRefreshPair} tokenRefreshPair 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public trackerApiViewUserRefreshToken(tokenRefreshPair: TokenRefreshPair, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).trackerApiViewUserRefreshToken(tokenRefreshPair, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reg Enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public trackerApiViewUserRegEnabled(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).trackerApiViewUserRegEnabled(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {RegisterIn} registerIn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public trackerApiViewUserRegister(registerIn: RegisterIn, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).trackerApiViewUserRegister(registerIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Me
     * @param {UserSchema} userSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public trackerApiViewUserUpdateMe(userSchema: UserSchema, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).trackerApiViewUserUpdateMe(userSchema, options).then((request) => request(this.axios, this.basePath));
    }
}



